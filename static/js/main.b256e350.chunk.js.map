{"version":3,"sources":["WebCameraTest.js","App.js","reportWebVitals.js","index.js"],"names":["WebCameraTest","isRecording","setIsRecording","useState","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","status","setStatus","transcription","setTranscription","captureText","setCaptureText","videoRef","useRef","React","createElement","className","ref","autoPlay","playsInline","muted","type","value","onChange","e","target","placeholder","onClick","async","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","recorder","MediaRecorder","ondataavailable","event","data","size","prev","err","message","startRecording","start","recognition","window","webkitSpeechRecognition","continuous","interimResults","onresult","transcript","Array","from","results","map","result","join","disabled","stopRecording","stop","saveRecording","blob","Blob","url","URL","createObjectURL","a","document","style","display","href","download","body","appendChild","click","revokeObjectURL","length","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b256e350.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Camera, Mic, Save } from 'lucide-react';\r\nimport piexif from 'piexifjs';\r\n\r\nconst WebCameraTest = () => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [recordedChunks, setRecordedChunks] = useState([]);\r\n  const [status, setStatus] = useState('Ready');\r\n  const [transcription, setTranscription] = useState('');\r\n  const [captureText, setCaptureText] = useState('');\r\n  const videoRef = useRef(null);\r\n\r\n  const startCamera = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      videoRef.current.srcObject = stream;\r\n      setStatus('Camera ready');\r\n\r\n      const recorder = new MediaRecorder(stream);\r\n      setMediaRecorder(recorder);\r\n\r\n      recorder.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          setRecordedChunks((prev) => [...prev, event.data]);\r\n        }\r\n      };\r\n    } catch (err) {\r\n      setStatus('Error accessing camera: ' + err.message);\r\n    }\r\n  };\r\n\r\n  const startRecording = () => {\r\n    setRecordedChunks([]);\r\n    setTranscription('');\r\n    mediaRecorder.start();\r\n    setIsRecording(true);\r\n    setStatus('Recording...');\r\n\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = true;\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join('');\r\n      setTranscription(transcript);\r\n    };\r\n\r\n    recognition.start();\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    mediaRecorder.stop();\r\n    setIsRecording(false);\r\n    setStatus('Recording stopped');\r\n  };\r\n\r\n  const saveRecording = () => {\r\n    const blob = new Blob(recordedChunks, { type: 'video/webm' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = 'recording.webm';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center w-full max-w-4xl mx-auto space-y-4 p-4\">\r\n      <div className=\"relative w-full aspect-video bg-gray-900 rounded-lg overflow-hidden\">\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          className=\"w-full h-full object-cover\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"text-center p-2 bg-gray-100 rounded-lg w-full\">\r\n        {status}\r\n      </div>\r\n\r\n      {transcription && (\r\n        <div className=\"text-center p-2 bg-gray-100 rounded-lg w-full\">\r\n          Transcription: {transcription}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"w-full\">\r\n        <input\r\n          type=\"text\"\r\n          value={captureText}\r\n          onChange={(e) => setCaptureText(e.target.value)}\r\n          placeholder=\"Enter text for image metadata\"\r\n          className=\"w-full p-2 border rounded-lg\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex space-x-4\">\r\n        <button onClick={startCamera} className=\"p-2 bg-blue-500 text-white rounded-lg\">\r\n          Start Camera\r\n        </button>\r\n        <button onClick={startRecording} disabled={isRecording} className=\"p-2 bg-green-500 text-white rounded-lg\">\r\n          Start Recording\r\n        </button>\r\n        <button onClick={stopRecording} disabled={!isRecording} className=\"p-2 bg-red-500 text-white rounded-lg\">\r\n          Stop Recording\r\n        </button>\r\n        <button onClick={saveRecording} disabled={recordedChunks.length === 0} className=\"p-2 bg-yellow-500 text-white rounded-lg\">\r\n          Save Recording\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebCameraTest;","import React from 'react';\nimport WebCameraTest from './WebCameraTest';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WebCameraTest />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}